iOS平台有其局限性，作为开发者90%以上的时间是基于Apple的各种Frameworks进行各种开发（其实就是应用层开发），这没什么技术性可言，只有API熟不熟悉，业务逻辑正不正确，编程的世界还有很多很多需要去探索，比如：模拟器、软3D渲染、编译原理、OS、驱动等等，其核心还是原理和算法。原理和算法也有大小之分，创新的算法有可能创造出新的编程分支，创造出新的能力，比如：AI算法、大数据、云计算等等，小处的原理和算法可以改进产品，比如：如何秒开视频，如果你懂视频格式和播放原理的话，就可以做到秒开。从上面的分析来讲，编程可以划分几个层次：1、基于框架API的业务开发；2、基于框架原理的库封装；3、基于新算法的新能力编程。大部分人在第1阶段（国内吧），少数人在第2阶段（精英，国外吧），老Hacker在第3阶段（还有些搞学术的人），cracker基本在1或者2阶段。iOS由于偏重于产品的完整性采用闭源策略，大部分人都不知道框架的原理（看不到源码），基本都在第1阶段，想知道原理需要一些Hacker技术（逆向工程等），还有一些是了解第三方开源库原理，这就是所谓的“大神”。从这些可以看到一些做事情的方法：基础、能力和格局。基础知识是根本前提，否则你是玩不动的，能力偏向于个人的智商、思维方式和严谨程度，能力强的可以基于基础知识和基本原理思考和创造很多新东西，格局决定个人创造的事物本身的大小，也决定个人的成就。能力强的人，不一定有大的成就，因为陷入细节和原理，不能从大的方面看待事物。编程有其种种限制，比如CPU的指令集、内存大小，外设多少等等，基于某平台的编程限制更多，基于封闭平台的编程基本被当成Coder来看待，这也是iOS开发者内心的痛。为什么喜欢艺术，因为没有约束，拿起画笔你可以画出任何形状，涂出任何颜色，表达任何想法。