数据结构声明、数据结构定义、数据定义、数据使用
函数声明、函数定义、函数调用

函数指针定义本质是接口（协议）定义，函数指针变量是对一类函数的抽象。

函数调用需要区分，调用的方向性，调用发起者需要定义函数指针（接口）变量，调用接受者需要实现函数。接受者的函数需要定义成对外调用接口，发起者的函数需要定义成内部函数指针变量。

数组可以实现下标到数据的映射，数组本质是定义确定的映射关系，是对一类映射关系的抽象。可以使用确定性映射代替确定性判断（一对一或者多对一的映射）。映射关系的定义其实是一种数据的抽象和封装，使用数组代替具体的映射关系。

变量是对一类数据的抽象，变量值的不确定性可以引起数组下标的不确定性，数组下标的不确定性导致数组映射关系的不确定性，进而产生映射关系的抽象性。抽象性的本质是一类事物的不确定性，一对多的不确定关系。不确定性（抽象）具有因果关系和传递性。不确定性按照范围可以区分大小，比如：NES模拟器的不确定性要比NES游戏程序要大，功能也越强大，编程也越底层。越抽象的程序功能越强大。

事物类别区分的依据是事物的若干特征。比如：一类函数依据函数的参数和返回值来进行区分。函数指针变量代表一类函数，其定义也是依据函数的参数和返回值进行的。

结构体是对事物特征离散关系的抽象；共用体是对事物局部与整体关系的抽象；数组是对事物映射关系的抽象；枚举是对数值连续关系和数值全集的抽象；

基于抽象接口编程，依赖抽象接口而非实现。B模块函数调用如果不基于接口直接使用A模块的函数名称，如果A模块的函数名称有变动，则B中所有的函数调用名称需要修改。如果基于接口编程，则只要接口不修改B模块就不需要修改。抽象接口必须实例化才能工作。越抽象的程序功能越强大，灵活性越高。