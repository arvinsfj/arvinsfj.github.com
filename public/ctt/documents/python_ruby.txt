      所谓”魔幻语言“,主要代表作品有C++、Perl、Javascript和Ruby。这些语言拥有丰富的特性,聪明的技巧和意想不到的奇效,永远有发掘 不完的奇技淫巧,总能找到让人匪夷所思的”yet another way"。反过来,“简约语言”崇尚清晰直接,够用就行,要求从代码容易理解,宁可笨一点、累一点、多写一点代码,反对出人意料的技巧,反对故弄玄虚。 C、PHP、Python和Lua这一派语言的代表作。而Java和C#从语言设计来说,一开始还是比较简约的,但是近来越来越魔幻,而且标准库设计相当 繁复。但我倾向于将它们归于简约语言一类,因为虽然在其中也有很多技巧,但是这两种语言社群的总体风格是比较质朴的。VB的传统是典型的简约,老式的 VB6和VBA都是典型的简约派,新的VB.NET虽然也能玩出魔幻来,但是根本上还是更亲近简约语言。

      魔幻语言通常看上去更加引人入胜,能够做一大堆让人目瞪口呆的事情。魔幻语言的拥护者,通常都热衷于这种智力竞赛,他们发掘语言中每一个死角,寻找有趣的 技巧组合,一遍遍地寻找更好的方法和思路,对语言层面的技巧如痴如醉,乐此不疲。在魔幻语言的社群里,“语言高手”是备受尊崇的,他们可能不知道怎么响应 一个HTTP请求,但是却能够用不少于6种方式来写一个for循环。他们写的代码是一种谜语般的艺术,出谜语和猜谜语的人们都能从中获得巨大的精神满足。

      简约语言就土多了。通常做一件事情就那么一两种方法,你真的没多少花花肠子可绕。光看代码根本不看不出你的道行,随便一个受过一点专业训练的人也能看透你 葫芦里卖的什么药,在代码里找成就感,基本没戏。当然,这并不是说简约语言的“能力”要比魔幻语言差,或者是会限制你的思维。相反,简约语言让你把注意力 集中在哪些真正与问题相关的地方,而不是语言本身的表达方式上。因此从工程上看,简约语言更适合大规模、协作式的软件开发。
从长时间的比较来看,简约语言无疑受到更广泛的支持。

      魔幻语言如果进行有效地控制,也可以以简约的方式来使用。这其中有两种途径,其一是通过有效的限制方式使语言的应用归于质朴。比如Java和C#本身具有 很多魔幻特性,是有资格称为魔幻语言的,但是整个社群的风气比较单纯,很少人喜欢炫技耍酷,语言的应用风格被有效地限制在一个“简约子集”之中。第二条路 径是通过魔幻实现质朴,C++大师Andrew Koenig曾经用这个观点来为C++的复杂辩护,但是C++在这方面做得并不好。要说这方面的成功案例,Ruby on Rails倒算是一个。RoR在实现中用了很多奇技淫巧,但是在这个框架之上开发Web应用,却显得比PHP更简约直观,这就是通过魔幻达到简约的例子。

      回到开头的话题,Ruby是一个典型的魔幻语言,而Python则是简约派的代表。两个语言的支持人群在审美观念和开发风格方面差距非常大。初学Ruby 和Python的人,都会感受到一种欣喜和兴奋,但是原因却不太一样。Ruby的学习者会惊喜于很多新的表达方式,比如 :attr_accessor 之类的魔幻特性,而Python学习者则会惊喜于实现具体功能的简洁性。可以说从一开始他们追求的就是不同的东西。随着学习的深入,Python开发者当 然也会发现Python中的不少深入的特性,不过却并不倾向于滥用它们。长次以往,Python人群对任何语言的魔幻面都会产生一种厌恶感。我认识的一个 Django开发者,就明确表示,就算RoR比Django开发效率高一点,也绝不使用Ruby,因为Ruby这个语言充满了“不必要的小聪明”。

       从性能上来说,Python的性能获得大幅度提升的机会不太大,但我并不相信YARV能够真的让Ruby在速度上享有对Python的明显优势,两者的运 行时效率最终应当在同一个数量级上,因此,语言的选择主要还是取决于风格和审美倾向。据此,我判断Python的开发者不会大规模转向Ruby,Ruby 的发展也不会对Python构成实质的冲击。两种语言都将成为最主流的应用开发语言。

